/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.guiss;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.temporal.IsoFields;
import java.util.ArrayList;
import javax.swing.JOptionPane;



/**
 *
 * @author Dario
 */
public class GissUI extends javax.swing.JFrame {

    
    /**
    * Inicializa qualquer funcao e/ou atributo
    *
    * @author  Dario Santos
    * @version 1.0
    * @since   2018-05-30
    */
    private void start()
    {
        // Create a variable for the connection string.  
        String connectionUrl = "jdbc:sqlserver://localhost:1433;" +  
            "databaseName=Giss;user=sa;password=Lelo69Lelo69";  

        // Declare the JDBC objects.  
        Connection con = null;  
        Statement stmt = null;  
        ResultSet rs = null;  

        try 
        {  
            // Establish the connection.  
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
            con = DriverManager.getConnection(connectionUrl);  
            stmt = con.createStatement(); 
            
            
        }
        // Handle any errors that may have occurred.  
        catch (Exception e) 
        {  
            e.printStackTrace();  
        }  
        finally 
        {  
            if (rs != null) try { rs.close(); } catch(Exception e) {}  
            if (stmt != null) try { stmt.close(); } catch(Exception e) {}  
            if (con != null) try { con.close(); } catch(Exception e) {}  
        } 
    }
    
    
    /**
     * Creates new form GissUI
     */
    public GissUI() {
        start();
        initComponents();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        TabbedMenu = new javax.swing.JTabbedPane();
        PanelMarcacao = new javax.swing.JPanel();
        ComboBoxTipoHorario = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ComboBoxMarcacao = new javax.swing.JComboBox<>();
        ComboBoxNumSemana = new javax.swing.JComboBox<>();
        ComboBoxAno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaHorario = new javax.swing.JTable();
        ComboBoxNome = new javax.swing.JComboBox<>();
        BotaoCarregarHorario = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        ButtonReservar = new javax.swing.JButton();
        TextFieldRazaoMarcacao = new javax.swing.JTextField();
        TextFieldHoras = new javax.swing.JTextField();
        TextFieldData = new javax.swing.JTextField();
        PanelConsulta = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableUtente = new javax.swing.JTable();
        ButtonProcuraUtente = new javax.swing.JButton();
        TextFieldIdUtente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        PanelMeioComplementar = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        PanelMarcacao.setPreferredSize(new java.awt.Dimension(1024, 680));

        ComboBoxTipoHorario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo", "Colaborador", "Recurso", "Local" }));
        ComboBoxTipoHorario.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                ComboBoxTipoHorarioPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel2.setText("Horário");

        jLabel5.setText("Marcação");

        ComboBoxMarcacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sequencial", "Prévia" }));
        ComboBoxMarcacao.setToolTipText("");

        ComboBoxNumSemana.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N. da Semana" }));

        ComboBoxAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ano", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "" }));
        ComboBoxAno.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                ComboBoxAnoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        TabelaHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"7:00-7:30", null, null, null, null, null, null, null},
                {"7:30-8:00", null, null, null, null, null, null, null},
                {"8:00-8:30", null, null, null, null, null, null, null},
                {"8:30-9:00", null, null, null, null, null, null, null},
                {"9:30-10:00", null, null, null, null, null, null, null},
                {"10:00-10:30", null, null, null, null, null, null, null},
                {"10:30-11:00", null, null, null, null, null, null, null},
                {"11:30-12:00", null, null, null, null, null, null, null},
                {"12:00-12:30", null, null, null, null, null, null, null},
                {"12:30-13:00", null, null, null, null, null, null, null},
                {"13:00-13:30", null, null, null, null, null, null, null},
                {"13:30-14:00", null, null, null, null, null, null, null},
                {"14:00-14:30", null, null, null, null, null, null, null},
                {"14:30-15:00", null, null, null, null, null, null, null},
                {"15:00-15:30", null, null, null, null, null, null, null},
                {"15:30-16:00", null, null, null, null, null, null, null},
                {"16:00-16:30", null, null, null, null, null, null, null},
                {"16:30-17:00", null, null, null, null, null, null, null},
                {"17:00-17:30", null, null, null, null, null, null, null},
                {"17:00-17:30", null, null, null, null, null, null, null},
                {"18:00-18:30", null, null, null, null, null, null, null},
                {"18:30-19:00", null, null, null, null, null, null, null}
            },
            new String [] {
                "Horas", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TabelaHorario.getTableHeader().setResizingAllowed(false);
        TabelaHorario.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TabelaHorario);
        if (TabelaHorario.getColumnModel().getColumnCount() > 0) {
            TabelaHorario.getColumnModel().getColumn(6).setResizable(false);
        }

        ComboBoxNome.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Escolha--" }));

        BotaoCarregarHorario.setText("Carregar");
        BotaoCarregarHorario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotaoCarregarHorarioMouseClicked(evt);
            }
        });

        jTextField1.setText("IdUtente");

        ButtonReservar.setText("Reservar");
        ButtonReservar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonReservarMouseClicked(evt);
            }
        });

        TextFieldRazaoMarcacao.setText("Razão da marcação");

        TextFieldHoras.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        TextFieldHoras.setText("14:24");

        TextFieldData.setText("2018-05-31");

        javax.swing.GroupLayout PanelMarcacaoLayout = new javax.swing.GroupLayout(PanelMarcacao);
        PanelMarcacao.setLayout(PanelMarcacaoLayout);
        PanelMarcacaoLayout.setHorizontalGroup(
            PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                        .addComponent(ComboBoxAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ComboBoxNumSemana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ComboBoxTipoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel5))
                    .addComponent(ComboBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotaoCarregarHorario))
                .addGap(18, 18, 18)
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                        .addComponent(ButtonReservar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                        .addComponent(ComboBoxMarcacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                        .addComponent(TextFieldRazaoMarcacao)
                        .addGap(14, 14, 14))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelMarcacaoLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                        .addComponent(TextFieldData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TextFieldHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 985, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );
        PanelMarcacaoLayout.setVerticalGroup(
            PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMarcacaoLayout.createSequentialGroup()
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ComboBoxNumSemana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ComboBoxTipoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ComboBoxAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ComboBoxMarcacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComboBoxNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldRazaoMarcacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelMarcacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotaoCarregarHorario)
                    .addComponent(ButtonReservar))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        TabbedMenu.addTab("Marcação", PanelMarcacao);

        TableUtente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Descrição T.O", "Observação ECli.", "Observações ECliA."
            }
        ));
        jScrollPane2.setViewportView(TableUtente);

        ButtonProcuraUtente.setText("Procura");
        ButtonProcuraUtente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonProcuraUtenteMouseClicked(evt);
            }
        });

        jLabel3.setText("IdUtente:");

        javax.swing.GroupLayout PanelConsultaLayout = new javax.swing.GroupLayout(PanelConsulta);
        PanelConsulta.setLayout(PanelConsultaLayout);
        PanelConsultaLayout.setHorizontalGroup(
            PanelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelConsultaLayout.createSequentialGroup()
                .addGroup(PanelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
                    .addGroup(PanelConsultaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldIdUtente, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonProcuraUtente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelConsultaLayout.setVerticalGroup(
            PanelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldIdUtente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ButtonProcuraUtente))
                .addContainerGap(427, Short.MAX_VALUE))
        );

        TabbedMenu.addTab("Consulta", PanelConsulta);

        javax.swing.GroupLayout PanelMeioComplementarLayout = new javax.swing.GroupLayout(PanelMeioComplementar);
        PanelMeioComplementar.setLayout(PanelMeioComplementarLayout);
        PanelMeioComplementarLayout.setHorizontalGroup(
            PanelMeioComplementarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1014, Short.MAX_VALUE)
        );
        PanelMeioComplementarLayout.setVerticalGroup(
            PanelMeioComplementarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
        );

        TabbedMenu.addTab("Meios Complementares", PanelMeioComplementar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 1016, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void BotaoCarregarHorarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotaoCarregarHorarioMouseClicked
        // TODO add your handling code here:
        for (int i = 0; i < TabelaHorario.getRowCount(); i++)
            for(int j = 1; j < TabelaHorario.getColumnCount(); j++) 
                TabelaHorario.setValueAt("", i, j);
            

        
        ArrayList<String> resultados = new ArrayList<>();
        
        String ano = tratarAno();
        if(ano.isEmpty())
            return;//terminar função
        
        ArrayList<String> semana = tratarSemana(ano);
        if(semana.isEmpty())
            return;//terminar função
        
        String tipoHorario = tratarTipoHorario();
        if(tipoHorario.isEmpty())
            return; //terminar função
        
        String id = ComboBoxNome.getSelectedItem().toString().split(" ")[0];
        
 
        for(int i = 0 ; i < 7 ; i++ )
        {
            
            resultados = Marcacao.carregarHorario(semana.get(i) , tipoHorario, id);
            for(int j = 0 ; j < resultados.size() ; j++)
            {
                String[] parts = resultados.get(j).split(" ");     
                isDisponivel(parts[2], parts[5],i);
               
            }
            
        }
        
    }//GEN-LAST:event_BotaoCarregarHorarioMouseClicked

    private void ComboBoxTipoHorarioPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ComboBoxTipoHorarioPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        ComboBoxNome.removeAllItems();
        ComboBoxNome.addItem("--Escolha--");
        String tipoHorario = tratarTipoHorario();
        if("break".equals(tipoHorario))
            return; //terminar função
        
        ArrayList<String> resultados = Marcacao.buscarTodos(tipoHorario);
        
        for(int i = 0 ; i < resultados.size(); i++)
            ComboBoxNome.addItem(resultados.get(i));

    }//GEN-LAST:event_ComboBoxTipoHorarioPopupMenuWillBecomeInvisible

    private void ButtonProcuraUtenteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonProcuraUtenteMouseClicked
        // TODO add your handling code here:
        ProcuraUtente();
        
    }//GEN-LAST:event_ButtonProcuraUtenteMouseClicked

    private void ComboBoxAnoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ComboBoxAnoPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        ComboBoxNumSemana.removeAllItems();
        ComboBoxNumSemana.addItem("N. da Semana");
        
        ArrayList<String> primeirosDiasSemana = tratarNumSemanas();
        
        
         for(int i = 0 ; i < primeirosDiasSemana.size(); i++)
            ComboBoxNumSemana.addItem((i+1) +" - " + primeirosDiasSemana.get(i));
        
    }//GEN-LAST:event_ComboBoxAnoPopupMenuWillBecomeInvisible

    private void ButtonReservarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonReservarMouseClicked
        // TODO add your handling code here:
        
        marcacaoSequencial();
        
    }//GEN-LAST:event_ButtonReservarMouseClicked
    
    //Marcação sequencial
    private void marcacaoSequencial()
    {
        //guardar idUtente
        String IdUtente = tratarIdUtente();
        //guardar a razão da marcação
        String razao = tratarRazao();
        
        //Buscar Hora
        String hora = tratarHora();
        
        //Buscar data
        String data = tratarData();
        //reservar a primeira meia hora livre da sala, colaborador e recurso
        
        if(!reservarHorario(data, hora))
        {
            
            JOptionPane.showMessageDialog(null, "Não existem horarios disponiveis", "Erro Horarios Indisponiveis", JOptionPane.ERROR_MESSAGE);
        
        }
        
    }
    
    private String tratarIdUtente()
    {
        String idUtente = TextFieldRazaoMarcacao.getText();
        
        return idUtente;
    }
    
    private String tratarRazao()
    {
        String razao = TextFieldRazaoMarcacao.getText();
        if(razao.length()>=300)
        {
            razao = null;
            
            JOptionPane.showMessageDialog(null, "Razao não pode ter mais de 300 caracteres", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        return razao;
    }
    
    private String tratarHora()
    {
        String horas[] = TextFieldHoras.getText().split(":");
        String horario ="";
        int hora = Integer.parseInt(horas[0]);
        int minuto = Integer.parseInt(horas[1]);
        
        if(minuto >= 30)
        {
            hora++;
            minuto = 0;
        }
        else
        {
            minuto = 30;
        }
        if(hora < 7)
            hora = 7;
        if(hora > 19)
            hora = 7;
        horario = hora <10 ? "0"+hora : ""+hora;
        
        horario += minuto < 10 ? ":0"+minuto : ":"+minuto;
        System.out.println(horario);
        return horario;
    }
    
    private String tratarData()
    {
        String data = TextFieldData.getText(); 
        return data;
    }
    
    private boolean reservarHorario(String data, String hora)
    {
        
        ArrayList<String> resultados = Marcacao.buscarHorariosDisponiveis(data, hora);
        
        if(resultados.isEmpty())
            return false;
        System.out.println(resultados.get(0));
        String split[] = resultados.get(0).split(" ");
        for(int i = 0 ; i < split.length ; i++)
            System.out.println("i:" + i + ", split: " + split[i]);
        
        Marcacao.atualizarHorarioTrabalho(split[0]);
        Marcacao.atualizarHorarioLocal(split[1]);
        
        return true;
    }

 
    private ArrayList<String> tratarNumSemanas()
    {
        if(ComboBoxAno.getSelectedItem().toString().equals("Ano"))
        {
            return new ArrayList<String>();
        }
        int ano = Integer.parseInt(ComboBoxAno.getSelectedItem().toString());
        String data = "";
           
        
        int diaSemana = diaDaSemana(ano-1, 13,1);
        
        LocalDate date = LocalDate.of(ano, 6, 1);
        int numSemanasAno = (int) IsoFields.WEEK_OF_WEEK_BASED_YEAR.rangeRefinedBy(date).getMaximum();
        
        
        int numDias = 0;
        
        if(diaSemana == 1)
            numDias = 6;
        else if(diaSemana == 0)
            numDias = 5;
        else if(diaSemana > 1 && diaSemana <= 6 )
            numDias = diaSemana - 2;
        
        ArrayList<String> primeirosDiasSemana = new ArrayList<>();
        int diaAtual = 0;
        int lim = 31;
        int mes = 12;
        switch(numDias)
        {
            case 0:
                data = "01-01";  
                diaAtual = 1;
                mes = 1;
                break;
            case 1:
                //Terça
                data ="12-31";
                diaAtual = 31;
                break;
            case 2:
                //Quarta
                data ="12-30";
                diaAtual = 30;
                break;
            case 3:
                //Quinta
                data ="12-29";
                diaAtual = 29;
                break;
            case 4:
                //Sexta
                data ="12-28";
                diaAtual = 28;
                break;
            case 5:
                //Sábado
                data ="12-27";
                diaAtual = 27;
                break;
            case 6:
                //Domingo
                data ="12-26";
                diaAtual = 26;
                break;
        }
        
        primeirosDiasSemana.add(data);
        for(int i = 0 ; i < numSemanasAno-1 ; i++)
        {
            if((diaAtual + 7) > lim )
            {
                diaAtual = (diaAtual + 7) - lim;
                mes++;
                
                switch(mes)
                {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        lim = 31;
                        break;
                    
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                        lim = 30;
                        break;
                    
                    case 13:
                        mes = 1;
                        lim = 31;
                        break;
                    
                    case 2:
                        if((ano & 3) == 0 && ((ano % 25) != 0 || (ano & 15) == 0))

                            lim = 29;
                        else 
                            lim = 28;
                        break;
                
                }
                if(mes < 10)
                    data = "0"+mes+"-";
                else 
                    data = ""+mes+"-";
                
                if(diaAtual < 10)
                    data +="0"+diaAtual;
                else
                    data +=diaAtual;
            }
            else
            {
                diaAtual += 7;
                
                if(mes < 10)
                    data = "0"+mes+"-";
                else 
                    data = ""+mes+"-";
                
                if(diaAtual < 10)
                    data +="0"+diaAtual;
                else
                    data +=diaAtual;
            }
            primeirosDiasSemana.add(data);
        }

        return primeirosDiasSemana;
    }
       
    
    private void isDisponivel(String testar,String disponibilidade , int i)
    {
        
        String status = disponibilidade.equals("T") ? "Livre" : "Ocupado";
        
        switch(testar)
        {
            case "07:00:00.0000000":
                TabelaHorario.setValueAt(status, 0, i + 1);
                break;
            case "07:30:00.0000000":
                TabelaHorario.setValueAt(status, 1, i + 1);
                break;
            case "08:00:00.0000000":
                TabelaHorario.setValueAt(status, 2, i + 1);
                break;
            case "08:30:00.0000000":
                TabelaHorario.setValueAt(status, 3, i + 1);
                break;
            case "09:00:00.0000000":
                TabelaHorario.setValueAt(status, 4, i + 1);
                break;
            case "09:30:00.0000000":
                TabelaHorario.setValueAt(status, 5, i + 1);
                break;
            case "10:00:00.0000000":
                TabelaHorario.setValueAt(status, 6, i + 1);
                break;
            case "10:30:00.0000000":
                TabelaHorario.setValueAt(status, 7, i + 1);
                break;
            case "11:00:00.0000000":
                TabelaHorario.setValueAt(status, 8, i + 1);
                break;
            case "11:30:00.0000000":
                TabelaHorario.setValueAt(status, 9, i + 1);
                break;
            case "12:00:00.0000000":
                TabelaHorario.setValueAt(status, 10, i + 1);
                break;
            case "12:30:00.0000000":
                TabelaHorario.setValueAt(status, 11, i + 1);
                break;
            case "13:00:00.0000000":
                TabelaHorario.setValueAt(status, 12, i + 1);
                break;
            case "13:30:00.0000000":
                TabelaHorario.setValueAt(status, 13, i + 1);
                break;
            case "14:00:00.0000000":
                TabelaHorario.setValueAt(status, 14, i + 1);
                break;
            case "14:30:00.0000000":
                TabelaHorario.setValueAt(status, 15, i + 1);
                break;
            case "15:00:00.0000000":
                TabelaHorario.setValueAt(status, 16, i + 1);
                break;
            case "15:30:00.0000000":
                TabelaHorario.setValueAt(status, 17, i + 1);
                break;
            case "16:00:00.0000000":
                TabelaHorario.setValueAt(status, 18, i + 1);
                break;
            case "16:30:00.0000000":
                TabelaHorario.setValueAt(status, 19, i + 1);
                break;
            case "17:00:00.0000000":
                TabelaHorario.setValueAt(status, 20, i + 1);
                break;
            case "17:30:00.0000000":
                TabelaHorario.setValueAt(status, 21, i + 1);
                break;
            case "18:00:00.0000000":
                TabelaHorario.setValueAt(status, 22, i + 1);
                break;
            case "18:30:00.0000000":
                TabelaHorario.setValueAt(status, 23, i + 1);
                break;
            case "19:00:00.0000000":
                TabelaHorario.setValueAt(status, 24, i + 1);
                break;
        } 
        
    }
    
    private int diaDaSemana(int ano, int mes, int dia)
    {
 
        //N = d + 2m + [3(m+1)/5] + y + [y/4] - [y/100] + [y/400] + 2
        // d = nº de dias
        // m = nº do mês 
        // NO CASO DE JANEIRO E FEVEREIRO UTILIZAMOS 13 E 14 E NO ANO ANTERIOR
        // 1/1/1998 seria 1/13/1997
        // y = ano
        
        //After you find the number N, divide it by 7, and the REMAINDER of that 
        //division tells you the day of the week; 
        //1 = Domingo, 2 = Segunda, 3 = Terca, 4 = Quarta, 5 = Quinta, 6 = Sexta; BUT, if the remainder is 0, then the day is Saturday, 
        //that is: 0 = Saturday.
        
        float N = dia + 2*mes + (3 * (mes + 1) /5) + ano + ano/4 - ano/100 + ano/400 + 2;     
        int diaSemana =(int) N % 7;
        return diaSemana;
    }
    
    private ArrayList<String> tratarSemana(String ano)
    {
        if(ComboBoxNumSemana.getSelectedItem().toString().equals("N. da Semana"))
        {
            return new ArrayList<String>();
        }
        
        String semana = ComboBoxNumSemana.getSelectedItem().toString().split(" ")[2];
        
        
        
        return calcularSemana(ano, semana);
        
    }
    
    private ArrayList<String> calcularSemana(String s_ano, String numSemana)
    {
        String[] data = new String[2];
        data = numSemana.split("-");
        int ano = Integer.parseInt(s_ano);
        int mes = Integer.parseInt(data[0]);
        int dia = Integer.parseInt(data[1]);
        ArrayList<String> semana = new ArrayList<>();
        
        int lim = 0;
        switch (mes) 
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
                lim = 31;
                break;
            case 12:
                ano--;
                lim = 31;
                break;

            case 4:
            case 6:
            case 9:
            case 11:
                lim = 30;
                break;

            case 13:
                mes = 1;
                lim = 31;
                ano++;
                break;

            case 2:
                if ((ano & 3) == 0 && ((ano % 25) != 0 || (ano & 15) == 0)) {
                    lim = 29;
                } 
                else 
                {
                    lim = 28;
                }
                break;

        }
        for(int i = 0 ;  i < 7 ; i++)
        {
            
            
            if(dia + i >lim)
            {
                mes++;
                dia = 1 - i;
                switch(mes)
                {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        lim = 31;
                        break;
                    
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                        lim = 30;
                        break;
                    
                    case 13:
                        mes = 1;
                        lim = 31;
                        ano++;
                        break;
                    
                    case 2:
                        if((ano & 3) == 0 && ((ano % 25) != 0 || (ano & 15) == 0))

                            lim = 29;
                        else 
                            lim = 28;
                        break;
                
                }
            }
            if(mes < 10)
                if(dia < 10)
                    semana.add(""+ano+"-0"+mes+"-0"+(dia+i));
                else
                    semana.add(""+ano+"-0"+mes+"-"+(dia+i));
            else
                if(dia < 10)
                    semana.add(""+ano+"-"+mes+"-0"+(dia+i));
                else
                    semana.add(""+ano+"-"+mes+"-"+(dia+i));
            
            
        
        }
        
        
        return semana;
    }
    
    private String tratarAno()
    {
        String ano = ComboBoxAno.getSelectedItem().toString();     
        return ano;
    }    
    
    private String tratarTipoHorario()
    {
        String tipoHorario = ComboBoxTipoHorario.getSelectedItem().toString();
        switch(tipoHorario)
        {
            case "Colaborador":
                tipoHorario = "HorarioTrabalho";
                break;
            case "Local":
                tipoHorario = "HorarioLocal";
                break;
            case "Recurso":
                tipoHorario = "HorarioRecurso";
                break;
                
        }
        
        return tipoHorario;
        
    }
    
    private void ProcuraUtente()
    {
        String Id=TextFieldIdUtente.getText();
        
        Consulta.ProcuraUtente(Id);
        
       
        
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GissUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GissUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GissUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GissUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GissUI().setVisible(true);
            }
        });    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoCarregarHorario;
    private javax.swing.JButton ButtonProcuraUtente;
    private javax.swing.JButton ButtonReservar;
    private javax.swing.JComboBox<String> ComboBoxAno;
    private javax.swing.JComboBox<String> ComboBoxMarcacao;
    private javax.swing.JComboBox<String> ComboBoxNome;
    private javax.swing.JComboBox<String> ComboBoxNumSemana;
    private javax.swing.JComboBox<String> ComboBoxTipoHorario;
    private javax.swing.JPanel PanelConsulta;
    private javax.swing.JPanel PanelMarcacao;
    private javax.swing.JPanel PanelMeioComplementar;
    private javax.swing.JTabbedPane TabbedMenu;
    private javax.swing.JTable TabelaHorario;
    private javax.swing.JTable TableUtente;
    private javax.swing.JTextField TextFieldData;
    private javax.swing.JTextField TextFieldHoras;
    private javax.swing.JTextField TextFieldIdUtente;
    private javax.swing.JTextField TextFieldRazaoMarcacao;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
